//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyStore.AcessoDados
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MyStoreEntities : DbContext
    {
        public MyStoreEntities()
            : base("name=MyStoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Categoria> Categoria { get; set; }
        public DbSet<Departamento> Departamento { get; set; }
        public DbSet<LogAtividades> LogAtividades { get; set; }
        public DbSet<Produto> Produto { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Usuario> Usuario { get; set; }
    
        public virtual ObjectResult<procCategoriaByTermoLIST_Result> procCategoriaByTermoLIST(string termo)
        {
            var termoParameter = termo != null ?
                new ObjectParameter("Termo", termo) :
                new ObjectParameter("Termo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procCategoriaByTermoLIST_Result>("procCategoriaByTermoLIST", termoParameter);
        }
    
        public virtual int procCategoriaDELETE(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procCategoriaDELETE", idCategoriaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> procCategoriaINSERT(string nome, Nullable<int> idDepartamento)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("procCategoriaINSERT", nomeParameter, idDepartamentoParameter);
        }
    
        public virtual ObjectResult<procCategoriaLIST_Result> procCategoriaLIST(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procCategoriaLIST_Result>("procCategoriaLIST", idCategoriaParameter);
        }
    
        public virtual int procCategoriaUpdate(Nullable<int> idCategoria, Nullable<int> idDepartamento, string nome, Nullable<bool> ativo)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var ativoParameter = ativo.HasValue ?
                new ObjectParameter("Ativo", ativo) :
                new ObjectParameter("Ativo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procCategoriaUpdate", idCategoriaParameter, idDepartamentoParameter, nomeParameter, ativoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> procLogAtividadesINSERT(string ip, string atividadeRealizada, Nullable<int> idUsuario)
        {
            var ipParameter = ip != null ?
                new ObjectParameter("Ip", ip) :
                new ObjectParameter("Ip", typeof(string));
    
            var atividadeRealizadaParameter = atividadeRealizada != null ?
                new ObjectParameter("AtividadeRealizada", atividadeRealizada) :
                new ObjectParameter("AtividadeRealizada", typeof(string));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("procLogAtividadesINSERT", ipParameter, atividadeRealizadaParameter, idUsuarioParameter);
        }
    
        public virtual ObjectResult<procLogAtividadesLIST_Result> procLogAtividadesLIST(Nullable<int> idLogAtividades)
        {
            var idLogAtividadesParameter = idLogAtividades.HasValue ?
                new ObjectParameter("IdLogAtividades", idLogAtividades) :
                new ObjectParameter("IdLogAtividades", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procLogAtividadesLIST_Result>("procLogAtividadesLIST", idLogAtividadesParameter);
        }
    
        public virtual ObjectResult<procProdutoByTermoLIST_Result> procProdutoByTermoLIST(string termo)
        {
            var termoParameter = termo != null ?
                new ObjectParameter("Termo", termo) :
                new ObjectParameter("Termo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procProdutoByTermoLIST_Result>("procProdutoByTermoLIST", termoParameter);
        }
    
        public virtual int procProdutoDELETE(Nullable<int> idProduto)
        {
            var idProdutoParameter = idProduto.HasValue ?
                new ObjectParameter("IdProduto", idProduto) :
                new ObjectParameter("IdProduto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procProdutoDELETE", idProdutoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> procProdutoINSERT(string nome, Nullable<int> idCategoria)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("procProdutoINSERT", nomeParameter, idCategoriaParameter);
        }
    
        public virtual ObjectResult<procProdutoLIST_Result> procProdutoLIST(Nullable<int> idProduto)
        {
            var idProdutoParameter = idProduto.HasValue ?
                new ObjectParameter("IdProduto", idProduto) :
                new ObjectParameter("IdProduto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procProdutoLIST_Result>("procProdutoLIST", idProdutoParameter);
        }
    
        public virtual int procProdutoUpdate(Nullable<int> idProduto, Nullable<int> idCategoria, string nome, Nullable<bool> ativo)
        {
            var idProdutoParameter = idProduto.HasValue ?
                new ObjectParameter("IdProduto", idProduto) :
                new ObjectParameter("IdProduto", typeof(int));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var ativoParameter = ativo.HasValue ?
                new ObjectParameter("Ativo", ativo) :
                new ObjectParameter("Ativo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procProdutoUpdate", idProdutoParameter, idCategoriaParameter, nomeParameter, ativoParameter);
        }
    
        public virtual ObjectResult<procUsuarioByTermoLIST_Result> procUsuarioByTermoLIST(string termo)
        {
            var termoParameter = termo != null ?
                new ObjectParameter("Termo", termo) :
                new ObjectParameter("Termo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procUsuarioByTermoLIST_Result>("procUsuarioByTermoLIST", termoParameter);
        }
    
        public virtual int procUsuarioDELETE(Nullable<int> idUsuario)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procUsuarioDELETE", idUsuarioParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> procUsuarioINSERT(string nome, string email, string senha)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var senhaParameter = senha != null ?
                new ObjectParameter("Senha", senha) :
                new ObjectParameter("Senha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("procUsuarioINSERT", nomeParameter, emailParameter, senhaParameter);
        }
    
        public virtual ObjectResult<procUsuarioLIST_Result> procUsuarioLIST(Nullable<int> idUsuario)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procUsuarioLIST_Result>("procUsuarioLIST", idUsuarioParameter);
        }
    
        public virtual int procUsuarioUpdate(Nullable<int> idUsuario, string nome, string email, string senha, Nullable<bool> ativo)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var senhaParameter = senha != null ?
                new ObjectParameter("Senha", senha) :
                new ObjectParameter("Senha", typeof(string));
    
            var ativoParameter = ativo.HasValue ?
                new ObjectParameter("Ativo", ativo) :
                new ObjectParameter("Ativo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procUsuarioUpdate", idUsuarioParameter, nomeParameter, emailParameter, senhaParameter, ativoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<procDepartamentoByTermoLIST_Result> procDepartamentoByTermoLIST(string termo)
        {
            var termoParameter = termo != null ?
                new ObjectParameter("Termo", termo) :
                new ObjectParameter("Termo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procDepartamentoByTermoLIST_Result>("procDepartamentoByTermoLIST", termoParameter);
        }
    
        public virtual int procDepartamentoDELETE(Nullable<int> idDepartamento)
        {
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procDepartamentoDELETE", idDepartamentoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> procDepartamentoINSERT(string nome)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("procDepartamentoINSERT", nomeParameter);
        }
    
        public virtual ObjectResult<procDepartamentoLIST_Result> procDepartamentoLIST(Nullable<int> idDepartamento)
        {
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procDepartamentoLIST_Result>("procDepartamentoLIST", idDepartamentoParameter);
        }
    
        public virtual int procDepartamentoUPDATE(Nullable<int> idDepartamento, string nome, Nullable<bool> ativo)
        {
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var ativoParameter = ativo.HasValue ?
                new ObjectParameter("Ativo", ativo) :
                new ObjectParameter("Ativo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procDepartamentoUPDATE", idDepartamentoParameter, nomeParameter, ativoParameter);
        }
    
        public virtual ObjectResult<procUsuarioAutenticar_Result> procUsuarioAutenticar(string login, string senha)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var senhaParameter = senha != null ?
                new ObjectParameter("Senha", senha) :
                new ObjectParameter("Senha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procUsuarioAutenticar_Result>("procUsuarioAutenticar", loginParameter, senhaParameter);
        }
    
        public virtual ObjectResult<procProdutoByCategoriaLIST_Result> procProdutoByCategoriaLIST(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procProdutoByCategoriaLIST_Result>("procProdutoByCategoriaLIST", idCategoriaParameter);
        }
    
        public virtual ObjectResult<procCategoriaByDepartamentoLIST_Result> procCategoriaByDepartamentoLIST(Nullable<int> idDepartamento)
        {
            var idDepartamentoParameter = idDepartamento.HasValue ?
                new ObjectParameter("IdDepartamento", idDepartamento) :
                new ObjectParameter("IdDepartamento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procCategoriaByDepartamentoLIST_Result>("procCategoriaByDepartamentoLIST", idDepartamentoParameter);
        }
    }
}
